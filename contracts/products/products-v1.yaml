openapi: 3.0.3
info:
  title: Products API
  version: 1.0.0
  description: API for managing products in the retail platform.

servers:
  - url: /api/v1

paths:
  /products:
    post:
      summary: Create a new product
      operationId: createProduct
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          headers:
            Location:
              description: URI of the created product
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '../common/components.yaml#/components/schemas/Problem'

  /products/search:
    post:
      tags: [Products]
      summary: Search products using criteria command
      operationId: searchProducts
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSearchCriteriaRequest'
            examples:
              basic:
                value:
                  page: 0
                  size: 20
                  sort: "createdAt,desc"
                  filters:
                    category: "laptops"
                    minPrice: 500
                    maxPrice: 2000
                    text: "pro"
                  includeDeleted: false
      responses:
        '200':
          description: Page of products
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductPage' }
        '400':
          $ref: '#/components/responses/BadRequest'


  /products/{id}:
    get:
      tags: [Products]
      summary: Get product by id
      operationId: getProductById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'


components:
  schemas:
    CreateProductRequest:
      type: object
      required: [sku, name, price, stock, category]
      properties:
        sku:
          type: string
          minLength: 1
          example: "ACME-123"
        name:
          type: string
          minLength: 1
          example: "Laptop Pro 14"
        price:
          type: number
          format: double
          minimum: 0
          example: 1299.99
        stock:
          type: integer
          minimum: 0
          example: 10
        category:
          type: string
          minLength: 1
          example: "laptops"

    Product:
      type: object
      required: [id, sku, name, price, stock, category, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        sku:
          type: string
          example: "ACME-123"
        name:
          type: string
          example: "Laptop Pro 14"
        price:
          type: number
          format: double
          example: 1299.99
        stock:
          type: integer
          example: 10
        category:
          type: string
          example: "laptops"
        createdAt:
          type: string
          format: date-time
          example: "2025-09-03T10:15:30Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-09-03T10:15:30Z"

    ProductPage:
      type: object
      required: [ content, page, size, totalElements, totalPages ]
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/Product' }
        page: { type: integer, minimum: 0 }
        size: { type: integer, minimum: 1 }
        totalElements: { type: integer, minimum: 0 }
        totalPages: { type: integer, minimum: 0 }

    ProductSearchCriteriaRequest:
      type: object
      description: Command-like criteria used to search products
      properties:
        page:
          type: integer
          minimum: 0
          default: 0
        size:
          type: integer
          minimum: 1
          maximum: 200
          default: 20
        sort:
          type: string
          description: Property and direction, e.g. "price,asc" or "createdAt,desc"
          example: "createdAt,desc"
        filters:
          type: object
          additionalProperties: false
          properties:
            category: { type: string }
            minPrice: { type: number, format: double, minimum: 0 }
            maxPrice: { type: number, format: double, minimum: 0 }
            text:
              type: string
              description: "Search in name and description (contains, case-insensitive)"
        includeDeleted:
          type: boolean
          default: false
      additionalProperties: false
